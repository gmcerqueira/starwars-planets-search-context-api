{"version":3,"sources":["context/PlanetsContext.jsx","components/filters/FilterByName.jsx","components/filters/FilterByNumber.jsx","components/filters/DataFilters.jsx","components/filters/ColumnOrder.jsx","components/filters/FiltersInUse.jsx","components/table/TableBody.jsx","services/auxFuncs.jsx","components/table/TableHeader.jsx","components/table/DataTable.jsx","context/PlanetsProvider.jsx","App.js","index.js"],"names":["PlanetsContext","createContext","FilterByName","handleNameInput","useContext","htmlFor","type","name","id","onChange","data-testid","FilterByNumber","saveFilter","returnAlreadyUsedFilter","useEffect","renderOptions","options","map","option","key","value","columnOptions","filter","columnSelector","createRef","comparisonSelector","valueSelector","ref","onClick","current","DataFilters","ColumnOrder","setSort","useState","column","sort","order","setOrder","target","Object","entries","population","orbital_period","diameter","rotation_period","surface_water","className","defaultChecked","FiltersInUse","filterNumber","filters","removeFilterNumber","index","comparison","TableBody","data","filteringByName","returnFromFilter","formatDate","date","match","split","reverse","join","planet","a","b","sortByName","parseFloat","sortByValues","rotationPeriod","orbitalPeriod","climate","gravity","terrain","surfaceWater","films","created","edited","url","film","i","href","TableHeader","DataTable","PlanetsProvider","children","setData","filterName","setFilterName","setFilterNumber","fetchPlanets","fetch","then","res","json","results","planets","context","Number","toLowerCase","includes","length","comparisonValue","reduce","acc","curr","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7958dcb6.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlanetsContext = createContext();\n\nexport default PlanetsContext;\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../../context/PlanetsContext';\n\nconst FilterByName = () => {\n  const { handleNameInput } = useContext(PlanetsContext);\n  return (\n    <label htmlFor=\"filterName\">\n      Name:\n      <input\n        type=\"text\"\n        name=\"filterName\"\n        id=\"filterName\"\n        onChange={ handleNameInput }\n        data-testid=\"name-filter\"\n      />\n    </label>\n  );\n};\n\nexport default FilterByName;\n","import React, { createRef, useContext, useEffect } from 'react';\nimport PlanetsContext from '../../context/PlanetsContext';\n\nconst FilterByNumber = () => {\n  const { saveFilter, returnAlreadyUsedFilter } = useContext(PlanetsContext);\n\n  useEffect(() => {\n  }, []);\n\n  const renderOptions = (options) => options.map((option) => (\n    <option key={ option } value={ option }>\n      {option}\n    </option>\n  ));\n\n  const columnOptions = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ].filter((option) => returnAlreadyUsedFilter(option));\n\n  const comparisonOptions = ['maior que', 'menor que', 'igual a'];\n  const columnSelector = createRef();\n  const comparisonSelector = createRef();\n  const valueSelector = createRef();\n\n  return (\n    <div>\n      <label htmlFor=\"column-filter\">\n        Column:\n        <select\n          name=\"column-filter\"\n          id=\"column-filter\"\n          ref={ columnSelector }\n          data-testid=\"column-filter\"\n        >\n          {renderOptions(columnOptions)}\n        </select>\n      </label>\n\n      <label htmlFor=\"comparison-filter\">\n        Comparison:\n        <select\n          name=\"comparison-filter\"\n          id=\"comparison-filter\"\n          ref={ comparisonSelector }\n          data-testid=\"comparison-filter\"\n        >\n          {renderOptions(comparisonOptions)}\n        </select>\n      </label>\n\n      <label htmlFor=\"value-filter\">\n        Value:\n        <input\n          type=\"number\"\n          name=\"value-filter\"\n          id=\"value-filter\"\n          ref={ valueSelector }\n          data-testid=\"value-filter\"\n        />\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ () => saveFilter(\n          columnSelector.current.value,\n          comparisonSelector.current.value,\n          valueSelector.current.value,\n        ) }\n      >\n        Add filter\n      </button>\n    </div>\n  );\n};\n\nexport default FilterByNumber;\n","import React from 'react';\nimport FilterByName from './FilterByName';\nimport FilterByNumber from './FilterByNumber';\n\nconst DataFilters = () => (\n  <div>\n    <FilterByName />\n    <FilterByNumber />\n  </div>\n);\n\nexport default DataFilters;\n","import React, { useContext, useState } from 'react';\nimport PlanetsContext from '../../context/PlanetsContext';\n\nconst ColumnOrder = () => {\n  const { setSort } = useContext(PlanetsContext);\n  const [order, setOrder] = useState({ column: 'name', sort: 'ASC' });\n\n  const handleColumnSortChange = (column) => {\n    setOrder({ ...order, column });\n  };\n\n  const handleWaySortChange = (sort) => {\n    setOrder({ ...order, sort });\n  };\n  const options = {\n    name: 'Name',\n    population: 'Population',\n    orbital_period: ' Orbital period',\n    diameter: 'Diameter',\n    rotation_period: 'Rotation period',\n    surface_water: 'Surface water',\n  };\n  return (\n    <div>\n      <select\n        name=\"\"\n        id=\"\"\n        onChange={ ({ target: { value } }) => handleColumnSortChange(value) }\n        data-testid=\"column-sort\"\n      >\n        {Object.entries(options).map((option) => (\n          <option key={ option[0] } value={ option[0] }>\n            {option[1]}\n          </option>\n        ))}\n      </select>\n      <div\n        className=\"radioChange\"\n        onChange={ ({ target: { value } }) => handleWaySortChange(value) }\n      >\n        <label htmlFor=\"sortWay\">\n          ascendente\n          <input\n            defaultChecked\n            type=\"radio\"\n            name=\"sortWay\"\n            id=\"sortAsc\"\n            value=\"ASC\"\n            data-testid=\"column-sort-input-asc\"\n          />\n        </label>\n        <label htmlFor=\"sortWay\">\n          descendente\n          <input\n            type=\"radio\"\n            name=\"sortWay\"\n            id=\"sortDesc\"\n            value=\"DESC\"\n            data-testid=\"column-sort-input-desc\"\n          />\n        </label>\n      </div>\n      <button\n        type=\"button\"\n        onClick={ () => {\n          setSort(order);\n        } }\n        data-testid=\"column-sort-button\"\n      >\n        Sort\n      </button>\n    </div>\n  );\n};\n\nexport default ColumnOrder;\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../../context/PlanetsContext';\n\nconst FiltersInUse = () => {\n  const {\n    filters: { filterNumber },\n    removeFilterNumber,\n  } = useContext(PlanetsContext);\n  return (\n    <div>\n      {filterNumber\n        && filterNumber.map(({ column, comparison, value }, index) => (\n          <div key={ column } data-testid=\"filter\">\n            {`${column} ${comparison} ${value}`}\n            <button type=\"button\" onClick={ () => removeFilterNumber(index) }>X</button>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default FiltersInUse;\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../../context/PlanetsContext';\nimport { sortByName, sortByValues } from '../../services/auxFuncs';\n\nconst TableBody = () => {\n  const {\n    data,\n    filteringByName,\n    returnFromFilter,\n    filters: { sort },\n  } = useContext(PlanetsContext);\n\n  const formatDate = (date) => (\n    <>\n      <div>{date.match(/\\d*:\\d*/)}</div>\n      <div>{date.match(/^\\d*-\\d*-\\d*/)[0].split('-').reverse().join('/')}</div>\n    </>\n  );\n\n  return (\n    <tbody>\n      {data\n        && data\n          .filter((planet) => filteringByName(planet))\n          .filter((planet) => returnFromFilter(planet))\n          .sort((a, b) => {\n            const { column } = sort;\n            if (column === 'name') return sortByName(a, b, sort);\n            return sortByValues(a, b, sort);\n          })\n          .map(\n            ({\n              name,\n              rotation_period: rotationPeriod,\n              orbital_period: orbitalPeriod,\n              diameter,\n              climate,\n              gravity,\n              terrain,\n              surface_water: surfaceWater,\n              population,\n              films,\n              created,\n              edited,\n              url,\n            }) => (\n              <tr key={ name }>\n                <td data-testid=\"planet-name\">{name}</td>\n                <td>{rotationPeriod}</td>\n                <td>{orbitalPeriod}</td>\n                <td>{diameter}</td>\n                <td>{climate}</td>\n                <td>{gravity}</td>\n                <td>{terrain}</td>\n                <td>{surfaceWater}</td>\n                <td>{population}</td>\n                <td>\n                  {films.map((film, i) => (\n                    <p key={ i }>\n                      <a href={ film }>{`Filme ${i + 1}`}</a>\n                    </p>\n                  ))}\n                </td>\n                <td>{formatDate(created)}</td>\n                <td>{formatDate(edited)}</td>\n                <td>\n                  <a href={ url }>{`Link to ${name}`}</a>\n                </td>\n              </tr>\n            ),\n          )}\n    </tbody>\n  );\n};\n\nexport default TableBody;\n","const falseReturn = -1;\nexport const sortByName = (a, b, order) => {\n  const { column, sort } = order;\n  if (sort === 'ASC') {\n    if (a[column] < b[column]) {\n      return falseReturn;\n    }\n    if (a[column] > b[column]) {\n      return 1;\n    }\n  }\n  if (sort === 'DESC') {\n    if (a[column] > b[column]) {\n      return falseReturn;\n    }\n    if (a[column] < b[column]) {\n      return 1;\n    }\n  }\n};\n\nexport const sortByValues = (a, b, order) => {\n  const { column, sort } = order;\n  if (sort === 'ASC') {\n    if (parseFloat(a[column]) < parseFloat(b[column])) {\n      return falseReturn;\n    }\n    if (parseFloat(a[column]) > parseFloat(b[column])) {\n      return 1;\n    }\n  }\n\n  if (sort === 'DESC') {\n    if (parseFloat(a[column]) > parseFloat(b[column])) {\n      return falseReturn;\n    }\n    if (parseFloat(a[column]) < parseFloat(b[column])) {\n      return 1;\n    }\n  }\n};\n","import React from 'react';\n\nconst TableHeader = () => (\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Rotation period</th>\n      <th>Orbital period</th>\n      <th>Diameter</th>\n      <th>Climate</th>\n      <th>Gravity</th>\n      <th>Terrain</th>\n      <th>Surface water</th>\n      <th>Population</th>\n      <th>Films</th>\n      <th>Created</th>\n      <th>Edited</th>\n      <th>Url</th>\n    </tr>\n  </thead>\n);\n\nexport default TableHeader;\n","import React from 'react';\nimport TableBody from './TableBody';\nimport TableHeader from './TableHeader';\n\nconst DataTable = () => (\n  <table>\n    <TableHeader />\n    <TableBody />\n  </table>\n);\n\nexport default DataTable;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nconst PlanetsProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  const [filterName, setFilterName] = useState('');\n  const [filterNumber, setFilterNumber] = useState([]);\n  const [sort, setSort] = useState({ column: 'name', sort: 'ASC' });\n\n  const fetchPlanets = async () => {\n    const PLANETS_URL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n    const planets = await fetch(PLANETS_URL)\n      .then((res) => res.json())\n      .then(({ results }) => results);\n\n    setData(planets);\n  };\n\n  const handleNameInput = ({ target }) => {\n    setFilterName(target.value);\n  };\n\n  const saveFilter = (column, comparison, value) => {\n    setFilterNumber([\n      ...filterNumber,\n      { column, comparison, value: Number(value) },\n    ]);\n  };\n\n  const filteringByName = (planet) => (filterName\n    ? planet.name.toLowerCase().includes(filterName.toLowerCase())\n    : planet);\n\n  const returnFromFilter = (planet) => {\n    if (filterNumber.length === 0) return planet;\n    const filter = filterNumber[filterNumber.length - 1];\n    const { column, comparison, value } = filter;\n    const comparisonValue = Number(planet[column]);\n\n    switch (comparison) {\n    case 'maior que':\n      return comparisonValue > value;\n\n    case 'menor que':\n      return comparisonValue < value;\n\n    case 'igual a':\n      return comparisonValue === value;\n\n    default:\n      return planet;\n    }\n  };\n\n  const returnAlreadyUsedFilter = (option) => {\n    const used = filterNumber.reduce((acc, curr) => [...acc, curr.column], []);\n\n    return !used.includes(option);\n  };\n\n  const removeFilterNumber = (index) => {\n    setFilterNumber(filterNumber.filter((filter, i) => i !== index));\n    // console.log(filterNumber.filter((filter, i) => i !== index));\n  };\n\n  useEffect(() => {\n    fetchPlanets();\n  }, []);\n\n  const context = {\n    data,\n    filters: {\n      filterName,\n      filterNumber,\n      sort,\n    },\n    setFilterName,\n    handleNameInput,\n    saveFilter,\n    filteringByName,\n    returnFromFilter,\n    returnAlreadyUsedFilter,\n    removeFilterNumber,\n    setSort,\n  };\n  return (\n    <PlanetsContext.Provider value={ context }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n};\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PlanetsProvider;\n","import React from 'react';\nimport './App.css';\nimport DataFilters from './components/filters/DataFilters';\nimport ColumnOrder from './components/filters/ColumnOrder';\nimport FiltersInUse from './components/filters/FiltersInUse';\nimport DataTable from './components/table/DataTable';\nimport PlanetsProvider from './context/PlanetsProvider';\n\nfunction App() {\n  return (\n    <PlanetsProvider>\n      <DataFilters />\n      <FiltersInUse />\n      <ColumnOrder />\n      <DataTable />\n    </PlanetsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}